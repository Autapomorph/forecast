// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Loader tests renders properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Loader>
    <MDSpinner
      color1="rgb(66, 165, 245)"
      color2="rgb(239, 83, 80)"
      color3="rgb(253, 216, 53)"
      color4="rgb(76, 175, 80)"
      duration={1333}
      singleColor="#fff"
      size={28}
    />
  </Loader>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <MDSpinner
        color1="rgb(66, 165, 245)"
        color2="rgb(239, 83, 80)"
        color3="rgb(253, 216, 53)"
        color4="rgb(76, 175, 80)"
        duration={1333}
        singleColor="#fff"
        size={28}
      />,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "color1": "rgb(66, 165, 245)",
        "color2": "rgb(239, 83, 80)",
        "color3": "rgb(253, 216, 53)",
        "color4": "rgb(76, 175, 80)",
        "duration": 1333,
        "singleColor": "#fff",
        "size": 28,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "styles__StyledLoaderMessage-p6qlbu-0",
        "isStatic": true,
        "rules": Array [
          "margin:10px 0;font-size:1.5rem;",
        ],
      },
      "displayName": "styles__StyledLoaderMessage",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "styles__StyledLoaderMessage-p6qlbu-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <MDSpinner
          color1="rgb(66, 165, 245)"
          color2="rgb(239, 83, 80)"
          color3="rgb(253, 216, 53)"
          color4="rgb(76, 175, 80)"
          duration={1333}
          singleColor="#fff"
          size={28}
        />,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "color1": "rgb(66, 165, 245)",
          "color2": "rgb(239, 83, 80)",
          "color3": "rgb(253, 216, 53)",
          "color4": "rgb(76, 175, 80)",
          "duration": 1333,
          "singleColor": "#fff",
          "size": 28,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "styles__StyledLoaderMessage-p6qlbu-0",
          "isStatic": true,
          "rules": Array [
            "margin:10px 0;font-size:1.5rem;",
          ],
        },
        "displayName": "styles__StyledLoaderMessage",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "styles__StyledLoaderMessage-p6qlbu-0",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
